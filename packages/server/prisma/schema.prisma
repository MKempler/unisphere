generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  handle           String    @unique
  didPublicKey     String?
  didPrivateKeyEnc String?
  createdAt        DateTime  @default(now())
  isDeprecated     Boolean   @default(false)
  posts            Post[]
  following        Follow[]  @relation("Follower")
  followers        Follow[]  @relation("Followee")
  usedInvites      Invite[]
}

model RemoteUser {
  id        String   @id @default(uuid())
  did       String   @unique
  handle    String?
  homeUrl   String?
  createdAt DateTime @default(now())
  // relations
  posts     Post[]   @relation("RemoteAuthor")
}

model Post {
  id            String      @id @default(uuid())
  text          String
  createdAt     DateTime    @default(now())
  // Local author (null if remote)
  author        User?       @relation(fields: [authorId], references: [id])
  authorId      String?
  // Remote author (null if local)
  remoteAuthor  RemoteUser? @relation("RemoteAuthor", fields: [remoteAuthorId], references: [id])
  remoteAuthorId String?
  // Federation metadata
  federationId  String?     @unique
  // Search metadata
  indexed       Boolean     @default(false)
  searchVector  Unsupported("tsvector")?
  // Hashtags
  hashtags      HashtagsOnPosts[]

  @@index([searchVector], type: Gin)
}

model Hashtag {
  id        String            @id @default(uuid())
  name      String            @unique
  createdAt DateTime          @default(now())
  posts     HashtagsOnPosts[]
}

model HashtagsOnPosts {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  hashtagId String
  createdAt DateTime @default(now())

  @@id([postId, hashtagId])
  @@index([hashtagId])
  @@index([postId])
}

model Follow {
  id         String   @id @default(uuid())
  follower   User     @relation("Follower", fields: [followerId], references: [id])
  followerId String
  followee   User     @relation("Followee", fields: [followeeId], references: [id])
  followeeId String
  createdAt  DateTime @default(now())

  @@unique([followerId, followeeId])
}

model Invite {
  id        String   @id @default(uuid())
  code      String   @unique
  usedBy    User?    @relation(fields: [usedById], references: [id])
  usedById  String?
  createdAt DateTime @default(now())
} 